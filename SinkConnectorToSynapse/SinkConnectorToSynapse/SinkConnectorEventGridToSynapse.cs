// Default URL for triggering event grid function in the local environment.
// https://7071/runtime/webhooks/EventGrid?functionName=SinkConnectorEventGridToSynapse
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Text;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using MongoDB.Bson;
using Newtonsoft.Json;

namespace SinkConnectorToSynapse
{
    public static class SinkConnectorEventGridToSynapse
    {
        private static readonly string SqlDwConnection = Environment.GetEnvironmentVariable("SqlDwConnection");

        private const string TableName = "dbo.Superstore";
        static SqlConnection conn;
        static SqlCommand comm;
        static SqlDataReader dreader;

        [Function("SinkConnectorEventGridToSynapse")]
        public static void Run([EventGridTrigger] MyEvent eventGridEvent, FunctionContext context)
        {
            var logger = context.GetLogger("SinkConnectorEventGridToSynapse");
            logger.LogInformation("C# EventGrid trigger function processed a request.");
            logger.LogInformation("Event Topic data generated by mongodb source connector ",
                eventGridEvent.ToString());

            try
            {
                // get message data
                var message = eventGridEvent.Data;
                var parsedMessage = BsonDocument.Parse(message.ToString());
                var data = JsonConvert.SerializeObject(parsedMessage);
                var rootData = JsonConvert.DeserializeObject<List<Root>>(data);
                Upsert(rootData, logger);
            }
            catch (Exception ex)
            {
                string s = string.Format(CultureInfo.InvariantCulture,
                    "Error processing request. Exception: {0}, Request: {1}", ex, eventGridEvent.ToString());
                logger.LogError(s);
            }
        }

        public class Root
        {
            public string Name { get; set; }
            public string Value { get; set; }
        }

        /// <summary>
        /// first check if data exists in datwarehouse, if yes do insert else update
        /// </summary>
        /// <param name="message"></param>
        private static void Upsert(List<Root> messageData, ILogger log)
        {
            conn = new SqlConnection(SqlDwConnection);

            try
            {
                conn.Open();
                var rowId = messageData.Where(x => x.Name == "RowID").FirstOrDefault().Value;
                // get the message data table.
                StringBuilder insertQueryColumn = new("INSERT INTO dbo.Superstore(");
                StringBuilder insertQueryValues = new("values(");
                StringBuilder updateQuery = new("UPDATE dbo.Superstore SET ");

                foreach (var data in messageData)
                {
                    if (data.Name != "_id")
                    {
                        insertQueryColumn = insertQueryColumn.Append(data.Name + ",");
                        insertQueryValues = insertQueryValues.Append("'" + data.Value + "'" + ",");
                        updateQuery = updateQuery.Append(data.Name + " = '" + data.Value + "',");
                    }
                }
                insertQueryColumn.Remove(insertQueryColumn.Length - 1, 1).Append(")");
                insertQueryValues.Remove(insertQueryValues.Length - 1, 1).Append(")");
                updateQuery.Remove(updateQuery.Length - 1, 1);
                Console.WriteLine(insertQueryColumn);
                Console.WriteLine(insertQueryValues);

                var comm = new SqlCommand($"IF EXISTS(SELECT * FROM dbo.Superstore WHERE RowId = '{ rowId }')"
                    + "BEGIN " + $"{updateQuery} WHERE RowId = '{ rowId }'" + " END " +
                    "ELSE BEGIN " + $"{insertQueryColumn} {insertQueryValues}" + "END", conn);
                var dreader = comm.ExecuteReader();
                dreader.Close();
                comm.Dispose();
                conn.Close();

            }
            catch (Exception ex)
            {
                log.LogError(" No Record", ex.Message);
            }
            finally
            {
                conn.Close();
            }
        }

    }

    public class MyEvent
    {
        public string Id { get; set; }

        public string Topic { get; set; }

        public string Subject { get; set; }

        public string EventType { get; set; }

        public DateTime EventTime { get; set; }

        public object Data { get; set; }
    }
}
